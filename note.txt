Modules -> Controllers, Services, Providers တွေကို organize လုပ်ပေးပါတယ်။
Controllers -> Incoming Requests တွေကို Handle လုပ်ပြီး response လုပ်ဖို့သုံးပါတယ်။
Services -> Controllers တွေအတွက် business logic ရေးဖို့သုံးပါတယ်။
Providers -> Services, Repositories တွေကို injectable ဖြစ်အောင်လုပ်ပေးပါတယ်။
Middleware -> Controller စီကိုမ‌ရောက်ခင် Request တွေ handle ပါတယ်။
Guard -> Authentication & Authorization လိုနေရာတွေမှာအများဆုံးသုံးပါတယ်။
Interceptors -> Client ကို response ကိုမ send ခင် response ကို modify လုပ်ပါတယ်။

npx prisma init

npx prisma

migration
- npx prisma migrate dev 


CRUD controller
- nest g resource [name] 
eg - nest g resource users

Database
- nest g module database
- nest g service database

Response
- response.interceptor.ts -> customize return api response format
- response-message.decorator.ts -> show custom message in api response

    const result = await this.databaseService.medicine.findMany({
      select: {
        id: true,
        name: true,
        // other fields...
        // Exclude the original image field from selection
      }
    }).then(medicines => medicines.map(medicine => ({
      ...medicine,
      image: 'hello'
    })));

    console.log('result', result);

purchases
- id
- purchaseDate
- totalAmount
- taxAmount
- invoiceNumber
- createdAt
- updatedAt

purchaseDetail
- id
- pruchaseId
- medicineId
- quantity
- price
- totalPrice

transaction
- id
- totalAmount
- date
- purchaseId


create purchase -> create purchaseDetail -> create transaction

medicine -> [
  {id: 1, name: 'medicine 1', quantity: '3'},
  {id: 2, name: 'medicine 2', quantity: '3'}
]


best selling item -> PurchaseDetail table -> loop medicineId -> quantity